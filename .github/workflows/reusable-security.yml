name: Reusable Security Workflow

on:
  workflow_call:
    inputs:
      python-version:
        description: 'Python version to use'
        required: false
        default: '3.13'
        type: string
      working-directory:
        description: 'Working directory for security scans'
        required: false
        default: '.'
        type: string
      upload-sarif:
        description: 'Whether to upload SARIF results to GitHub Security tab'
        required: false
        default: false
        type: boolean
    outputs:
      security-result:
        description: 'Security scan result'
        value: ${{ jobs.security.outputs.result }}

jobs:
  security:
    runs-on: ubuntu-latest
    outputs:
      result: ${{ steps.security-result.outputs.result }}

    permissions:
      contents: read
      security-events: write

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🐍 Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ inputs.python-version }}

    - name: 🟢 Install Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'

    - name: 🔧 Install security tools
      run: |
        python -m pip install --upgrade pip
        pip install bandit semgrep checkov
        npm install -g aws-cdk

    - name: 📦 Install project dependencies
      working-directory: ${{ inputs.working-directory }}
      run: |
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: 🔒 Run Bandit security scan
      working-directory: ${{ inputs.working-directory }}
      run: |
        echo "## 🔒 Security Scan Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

        bandit -r . -f json -o bandit-report.json || {
          echo "⚠️ **Bandit found security issues**" >> $GITHUB_STEP_SUMMARY
        }

        # Generate human-readable summary
        bandit -r . --format txt || {
          echo "⚠️ Bandit security issues detected" >> $GITHUB_STEP_SUMMARY
        }
      continue-on-error: true

    - name: 🔍 Run Semgrep security scan
      working-directory: ${{ inputs.working-directory }}
      run: |
        semgrep --config=auto --json --output=semgrep-report.json . || {
          echo "⚠️ **Semgrep found security issues**" >> $GITHUB_STEP_SUMMARY
        }

        # Generate human-readable summary
        semgrep --config=auto . || {
          echo "⚠️ Semgrep security issues detected" >> $GITHUB_STEP_SUMMARY
        }
      continue-on-error: true

    - name: 🏗️ Synthesize CloudFormation for security scanning
      working-directory: ${{ inputs.working-directory }}
      run: |
        export CDK_DEFAULT_ACCOUNT="645166163764"
        export CDK_DEFAULT_REGION="us-east-1"
        export GITHUB_REPO="infiquetra-aws-infra"

        if [ -f app.py ]; then
          cdk synth --all
        else
          echo "No CDK app found, skipping CloudFormation synthesis"
        fi
      continue-on-error: true

    - name: 🛡️ Run Checkov CloudFormation security scan
      working-directory: ${{ inputs.working-directory }}
      run: |
        if [ -d cdk.out ]; then
          checkov -d cdk.out --framework cloudformation --output json --output-file checkov-report.json || {
            echo "⚠️ **Checkov found CloudFormation security issues**" >> $GITHUB_STEP_SUMMARY
          }

          # Generate human-readable summary
          checkov -d cdk.out --framework cloudformation || {
            echo "⚠️ Checkov CloudFormation security issues detected" >> $GITHUB_STEP_SUMMARY
          }
        else
          echo "No CloudFormation templates found, skipping Checkov scan" >> $GITHUB_STEP_SUMMARY
        fi
      continue-on-error: true

    - name: 🔍 Run dependency vulnerability scan
      working-directory: ${{ inputs.working-directory }}
      run: |
        if [ -f requirements.txt ]; then
          pip install safety
          safety check --json --output safety-report.json || {
            echo "⚠️ **Safety found vulnerable dependencies**" >> $GITHUB_STEP_SUMMARY
          }

          # Generate human-readable summary
          safety check || {
            echo "⚠️ Vulnerable dependencies detected" >> $GITHUB_STEP_SUMMARY
          }
        else
          echo "No requirements.txt found, skipping dependency scan" >> $GITHUB_STEP_SUMMARY
        fi
      continue-on-error: true

    - name: 📤 Upload security scan results
      uses: actions/upload-artifact@v4
      with:
        name: security-reports-${{ github.run_id }}
        path: |
          ${{ inputs.working-directory }}/bandit-report.json
          ${{ inputs.working-directory }}/semgrep-report.json
          ${{ inputs.working-directory }}/checkov-report.json
          ${{ inputs.working-directory }}/safety-report.json
        if-no-files-found: warn

    - name: 📊 Generate security summary
      run: |
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "### Security Scan Summary" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Scans performed:**" >> $GITHUB_STEP_SUMMARY
        echo "- 🐍 **Bandit**: Python security analysis" >> $GITHUB_STEP_SUMMARY
        echo "- 🔍 **Semgrep**: Multi-language security patterns" >> $GITHUB_STEP_SUMMARY
        echo "- 🛡️ **Checkov**: CloudFormation security best practices" >> $GITHUB_STEP_SUMMARY
        echo "- 📦 **Safety**: Dependency vulnerability scanning" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "📊 **Detailed results are available in the uploaded artifacts.**" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "**Working Directory**: ${{ inputs.working-directory }}" >> $GITHUB_STEP_SUMMARY
        echo "**Scan Time**: $(date -u)" >> $GITHUB_STEP_SUMMARY

    - name: 📊 Set security result
      id: security-result
      run: echo "result=success" >> $GITHUB_OUTPUT